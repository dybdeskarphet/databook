"""
This type stub file was generated by pyright.
"""

import numpy as np
from builtins import bool as py_bool
from typing import Any, Literal, TYPE_CHECKING, TypeAlias
from ..common import _aliases
from ..common._typing import NestedSequence, SupportsBufferProtocol
from ._typing import Array, DType, Device

if TYPE_CHECKING:
    ...
_Copy: TypeAlias = py_bool | Literal[2] | np._CopyMode
bool = np.bool_
acos = ...
acosh = ...
asin = ...
asinh = ...
atan = ...
atan2 = ...
atanh = ...
bitwise_left_shift = ...
bitwise_invert = ...
bitwise_right_shift = ...
concat = ...
pow = ...
arange = ...
empty = ...
empty_like = ...
eye = ...
full = ...
full_like = ...
linspace = ...
ones = ...
ones_like = ...
zeros = ...
zeros_like = ...
UniqueAllResult = ...
UniqueCountsResult = ...
UniqueInverseResult = ...
unique_all = ...
unique_counts = ...
unique_inverse = ...
unique_values = ...
std = ...
var = ...
cumulative_sum = ...
cumulative_prod = ...
clip = ...
permute_dims = ...
reshape = ...
argsort = ...
sort = ...
nonzero = ...
ceil = ...
floor = ...
trunc = ...
matmul = ...
matrix_transpose = ...
tensordot = ...
sign = ...
finfo = ...
iinfo = ...
def asarray(obj: Array | complex | NestedSequence[complex] | SupportsBufferProtocol, /, *, dtype: DType | None = ..., device: Device | None = ..., copy: _Copy | None = ..., **kwargs: Any) -> Array:
    """
    Array API compatibility wrapper for asarray().

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

def astype(x: Array, dtype: DType, /, *, copy: py_bool = ..., device: Device | None = ...) -> Array:
    ...

def count_nonzero(x: Array, axis: int | tuple[int, ...] | None = ..., keepdims: py_bool = ...) -> Array:
    ...

def take_along_axis(x: Array, indices: Array, /, *, axis: int = ...): # -> NDArray[bool_ | integer[Any] | float32 | float64 | complex64 | complex128]:
    ...

if hasattr(np, "vecdot"):
    vecdot = ...
else:
    vecdot = ...
if hasattr(np, "isdtype"):
    isdtype = ...
else:
    isdtype = ...
if hasattr(np, "unstack"):
    unstack = ...
else:
    unstack = ...
__all__ = ["__array_namespace_info__", "asarray", "astype", "acos", "acosh", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_left_shift", "bitwise_invert", "bitwise_right_shift", "bool", "concat", "count_nonzero", "pow", "take_along_axis"]
__all__ += _aliases.__all__
_all_ignore = ...
def __dir__() -> list[str]:
    ...

