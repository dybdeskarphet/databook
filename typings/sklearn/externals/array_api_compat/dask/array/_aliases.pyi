"""
This type stub file was generated by pyright.
"""

from builtins import bool as py_bool
from typing import TYPE_CHECKING
from ...common import _aliases
from ...common._typing import Array, DType, Device, NestedSequence, SupportsBufferProtocol

if TYPE_CHECKING:
    ...
isdtype = ...
unstack = ...
def astype(x: Array, dtype: DType, /, *, copy: py_bool = ..., device: Device | None = ...) -> Array:
    """
    Array API compatibility wrapper for astype().

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

def arange(start: float, /, stop: float | None = ..., step: float = ..., *, dtype: DType | None = ..., device: Device | None = ..., **kwargs: object) -> Array:
    """
    Array API compatibility wrapper for arange().

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

eye = ...
linspace = ...
UniqueAllResult = ...
UniqueCountsResult = ...
UniqueInverseResult = ...
unique_all = ...
unique_counts = ...
unique_inverse = ...
unique_values = ...
permute_dims = ...
std = ...
var = ...
cumulative_sum = ...
cumulative_prod = ...
empty = ...
empty_like = ...
full = ...
full_like = ...
ones = ...
ones_like = ...
zeros = ...
zeros_like = ...
reshape = ...
matrix_transpose = ...
vecdot = ...
nonzero = ...
ceil = ...
floor = ...
trunc = ...
matmul = ...
tensordot = ...
sign = ...
finfo = ...
iinfo = ...
def asarray(obj: complex | NestedSequence[complex] | Array | SupportsBufferProtocol, /, *, dtype: DType | None = ..., device: Device | None = ..., copy: py_bool | None = ..., **kwargs: object) -> Array:
    """
    Array API compatibility wrapper for asarray().

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

def clip(x: Array, /, min: float | Array | None = ..., max: float | Array | None = ...) -> Array:
    """
    Array API compatibility wrapper for clip().

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

def sort(x: Array, /, *, axis: int = ..., descending: py_bool = ..., stable: py_bool = ...) -> Array:
    """
    Array API compatibility layer around the lack of sort() in Dask.

    Warnings
    --------
    This function temporarily rechunks the array along `axis` to a single chunk.
    This can be extremely inefficient and can lead to out-of-memory errors.

    See the corresponding documentation in the array library and/or the array API
    specification for more details.
    """
    ...

def argsort(x: Array, /, *, axis: int = ..., descending: py_bool = ..., stable: py_bool = ...) -> Array:
    """
    Array API compatibility layer around the lack of argsort() in Dask.

    See the corresponding documentation in the array library and/or the array API
    specification for more details.

    Warnings
    --------
    This function temporarily rechunks the array along `axis` into a single chunk.
    This can be extremely inefficient and can lead to out-of-memory errors.
    """
    ...

def count_nonzero(x: Array, axis: int | None = ..., keepdims: py_bool = ...) -> Array:
    ...

__all__ = ["__array_namespace_info__", "count_nonzero", "bool", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float32", "float64", "complex64", "complex128", "asarray", "astype", "can_cast", "result_type", "pow", "concat", "acos", "acosh", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_left_shift", "bitwise_right_shift", "bitwise_invert"]
__all__ += _aliases.__all__
_all_ignore = ...
def __dir__() -> list[str]:
    ...

